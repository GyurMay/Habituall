{"ast":null,"code":"import { backendAPI } from \"../clientDotEnv\";\nconst host = backendAPI;\nconst habitService = {\n  async createNewHabit(jsonObj) {\n    const resp = await fetch(host + '/api/habit/add', {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify({\n        content: jsonObj\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return resp;\n  },\n  async updateHabit(habitId, newHabitList) {\n    console.log(\"service\", habitId, newHabitList);\n    const resp = await fetch(host + \"/api/habit/update/\" + habitId, {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify({\n        newHabit: newHabitList\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return resp;\n  },\n  async deleteHabit(makeHabit) {\n    const resp = await fetch(host + \"/api/habit/delete\", {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify({\n        content: {\n          makeHabit\n        }\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return resp;\n  },\n  async loadNotes(makeHabit) {\n    const resp = await fetch(host + \"/api/notes/\" + makeHabit, {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return resp;\n  },\n  async createNote(noteObj, makeHabit) {\n    if (noteObj.note == '') noteObj.note = ' '; //temp fix\n    const resp = await fetch(host + \"/api/note/create\", {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify({\n        content: noteObj,\n        makeHabit\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return resp;\n  },\n  async deleteNote(makeHabit, noteId) {\n    const resp = await fetch(host + \"/api/note/delete\", {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify({\n        content: {\n          makeHabit,\n          noteId\n        }\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return resp;\n  },\n  async search(username) {\n    const resp = await fetch(host + \"/api/users/search\", {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify({\n        content: {\n          username\n        }\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return resp;\n  },\n  async getProfileInfo(username) {\n    console.log(\"getting profile info\");\n    const resp = await fetch(host + \"/api/users/profile\", {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify({\n        username\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return resp;\n  },\n  async getForeignNotes(username, makeHabit) {\n    const resp = await fetch(`${host}/api/users/${username}/habits/${makeHabit}`, {\n      method: \"GET\",\n      credentials: \"include\",\n      // body: JSON.stringify({content: {param}}),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return resp;\n  },\n  async getComments(noteId) {\n    const resp = await fetch(host + \"/api/comments/\" + noteId, {\n      method: \"GET\",\n      credentials: \"include\"\n    });\n    return resp;\n  },\n  async comment(newComment, noteId) {\n    const resp = await fetch(host + \"/api/comment/new\", {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify({\n        comment: newComment,\n        noteId\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return resp;\n  },\n  async deleteComment(commentId, noteId) {\n    const resp = await fetch(host + \"/api/comment/delete\", {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify({\n        commentId,\n        noteId\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return resp;\n  },\n  async toggleFollow(username, followStatus) {\n    let followEP = followStatus == true ? 'unfollow' : 'follow';\n    const resp = await fetch(host + \"/api/user/\" + username + \"/\" + followEP, {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return resp;\n  },\n  async getFeed() {\n    const resp = await fetch(host + \"/api/user/feed\", {\n      method: \"GET\",\n      credentials: \"include\"\n    });\n    return resp;\n  },\n  async template(param) {\n    const resp = await fetch(host + \"/api/habit/\", {\n      method: \"POST\",\n      credentials: \"include\",\n      body: JSON.stringify({\n        content: {\n          param\n        }\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return resp;\n  }\n};\nexport default habitService;","map":{"version":3,"names":["backendAPI","host","habitService","createNewHabit","jsonObj","resp","fetch","method","credentials","body","JSON","stringify","content","headers","updateHabit","habitId","newHabitList","console","log","newHabit","deleteHabit","makeHabit","loadNotes","createNote","noteObj","note","deleteNote","noteId","search","username","getProfileInfo","getForeignNotes","getComments","comment","newComment","deleteComment","commentId","toggleFollow","followStatus","followEP","getFeed","template","param"],"sources":["/Users/gyurmeydorj/Habituall/client/src/services/habitService.js"],"sourcesContent":["import { backendAPI } from \"../clientDotEnv\";\n\nconst host = backendAPI;\nconst habitService =  {\n    async createNewHabit(jsonObj){\n        const resp = await fetch(host+'/api/habit/add', {\n            method: \"POST\",\n            credentials: \"include\",\n            body: JSON.stringify({content: jsonObj }),\n            headers: {\n            \"Content-Type\": \"application/json\"\n            }\n        });\n        return resp;\n    },\n    async updateHabit(habitId, newHabitList){\n        console.log(\"service\", habitId, newHabitList)\n        const resp = await fetch(host+\"/api/habit/update/\"+habitId, {\n            method: \"POST\",\n            credentials: \"include\",\n            body: JSON.stringify({newHabit: newHabitList}),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        return resp;\n    },\n    async deleteHabit(makeHabit){\n        const resp = await fetch(host+\"/api/habit/delete\", {\n            method: \"POST\",\n            credentials: \"include\",\n            body: JSON.stringify({content: {makeHabit}}),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        return resp;\n    },\n    async loadNotes(makeHabit){\n        const resp = await fetch(host+\"/api/notes/\"+makeHabit, {\n            method: \"GET\",\n            credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        return resp;\n    },\n    async createNote(noteObj, makeHabit){\n        if(noteObj.note == '') noteObj.note = ' '; //temp fix\n        const resp = await fetch(host+\"/api/note/create\", {\n            method: \"POST\",\n            credentials: \"include\",\n            body: JSON.stringify({content: noteObj, makeHabit}),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        return resp;\n    },\n    async deleteNote(makeHabit, noteId){\n        const resp = await fetch(host+\"/api/note/delete\", {\n            method: \"POST\",\n            credentials: \"include\",\n            body: JSON.stringify({content: {makeHabit, noteId}}),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        return resp;\n    },\n    async search(username){\n        const resp = await fetch(host+\"/api/users/search\", {\n            method: \"POST\",\n            credentials: \"include\",\n            body: JSON.stringify({content: {username}}),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        return resp;\n    },\n    async getProfileInfo(username){\n        console.log(\"getting profile info\");\n        const resp = await fetch(host+\"/api/users/profile\", {\n            method: \"POST\",\n            credentials: \"include\",\n            body: JSON.stringify({username}),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        return resp;\n    },\n    async getForeignNotes(username, makeHabit){\n        const resp = await fetch(`${host}/api/users/${username}/habits/${makeHabit}`, {\n            method: \"GET\",\n            credentials: \"include\",\n            // body: JSON.stringify({content: {param}}),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        return resp;\n    } ,\n    async getComments(noteId){\n        const resp = await fetch(host+\"/api/comments/\"+noteId, {\n            method: \"GET\",\n            credentials: \"include\",\n        });\n        return resp;\n    },\n    async comment(newComment, noteId){\n        const resp = await fetch(host+\"/api/comment/new\", {\n            method: \"POST\",\n            credentials: \"include\",\n            body: JSON.stringify({comment: newComment, noteId}),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        return resp;\n    } ,\n    async deleteComment(commentId, noteId){\n        const resp = await fetch(host+\"/api/comment/delete\", {\n            method: \"POST\",\n            credentials: \"include\",\n            body: JSON.stringify({commentId, noteId}),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        return resp;\n    } ,\n    async toggleFollow(username, followStatus){\n        let followEP = (followStatus == true) ? 'unfollow' : 'follow';\n        const resp = await fetch(host+\"/api/user/\"+username+\"/\"+followEP, {\n        method: \"POST\",\n            credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        return resp;\n    } ,\n    async getFeed(){\n        const resp = await fetch(host+\"/api/user/feed\",{\n            method: \"GET\",\n            credentials: \"include\"\n        });\n        return resp;\n    },\n    async template(param){\n        const resp = await fetch(host+\"/api/habit/\", {\n            method: \"POST\",\n            credentials: \"include\",\n            body: JSON.stringify({content: {param}}),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        return resp;\n    } \n}\n\nexport default habitService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}