{"ast":null,"code":"import{useAuth}from\"../context/AuthContext\";import{useLocation,Navigate}from\"react-router-dom\";import{SharedProvider}from\"../context/SharedContext\";import{jsx as _jsx}from\"react/jsx-runtime\";function PrivateRoute(_ref){var children=_ref.children;var auth=useAuth();var location=useLocation();// const {currHabitProvided} = useSharedContext();\n// const {currHabit, setCurrHabit} = currHabitProvided;\n// const {currHabit, setCurrHabit} = useSharedContext();\nif(!auth.isAuthenticated){// console.log(\"auth not authenticate in Private Route\", auth.isAuthenticated, (new Date()).getMilliseconds());\n// Redirect them to the /login page, but save the current location they were\n// trying to go to when they were redirected. This allows us to send them\n// along to that page after they login, which is a nicer user experience\n// than dropping them off on the home page.\nreturn/*#__PURE__*/_jsx(Navigate,{to:\"/login\",state:{from:location},replace:true});}//wrap this with Context sharing currHabit\n// let comp = \n// <SharedProvider>\n// children\n// </SharedProvider>\n// ;\n// console.log(\"wrapped in SharedProvider\")\nreturn children;}// const PrivateRoute = ({ component: Component, ...rest }) => (\n//   <Route {...rest} render={(props) => (\n//     auth.isAuthenticated === true\n//       ? <Component {...props} />\n//       : \n//       // document.location = document.location.origin+'/login'\n//       <Navigate to='/login'\n//       // {{ \n//       //     // pathname: '/login',\n//       //     // state: { from: props.location }  \n//       //   }} \n//       />\n//   )} />\n// );\nexport default PrivateRoute;// export default PrivateWrapper;","map":{"version":3,"names":["useAuth","useLocation","Navigate","SharedProvider","jsx","_jsx","PrivateRoute","_ref","children","auth","location","isAuthenticated","to","state","from","replace"],"sources":["/Users/gyurmeydorj/Habituall/client/src/components/PrivateRoute.js"],"sourcesContent":["import { useAuth } from \"../context/AuthContext\";\r\nimport { useLocation, Navigate } from \"react-router-dom\";\r\nimport { SharedProvider } from \"../context/SharedContext\";\r\n\r\nfunction PrivateRoute({ children }) {\r\n  let auth = useAuth();\r\n  let location = useLocation();\r\n  // const {currHabitProvided} = useSharedContext();\r\n  // const {currHabit, setCurrHabit} = currHabitProvided;\r\n  // const {currHabit, setCurrHabit} = useSharedContext();\r\n\r\n  if (!auth.isAuthenticated) {\r\n    // console.log(\"auth not authenticate in Private Route\", auth.isAuthenticated, (new Date()).getMilliseconds());\r\n    // Redirect them to the /login page, but save the current location they were\r\n    // trying to go to when they were redirected. This allows us to send them\r\n    // along to that page after they login, which is a nicer user experience\r\n    // than dropping them off on the home page.\r\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n  }\r\n  \r\n//wrap this with Context sharing currHabit\r\n// let comp = \r\n  // <SharedProvider>\r\n    // children\r\n  // </SharedProvider>\r\n  // ;\r\n  // console.log(\"wrapped in SharedProvider\")\r\n  return children;\r\n}\r\n\r\n\r\n// const PrivateRoute = ({ component: Component, ...rest }) => (\r\n//   <Route {...rest} render={(props) => (\r\n//     auth.isAuthenticated === true\r\n//       ? <Component {...props} />\r\n//       : \r\n//       // document.location = document.location.origin+'/login'\r\n//       <Navigate to='/login'\r\n//       // {{ \r\n//       //     // pathname: '/login',\r\n//       //     // state: { from: props.location }  \r\n//       //   }} \r\n//       />\r\n//   )} />\r\n// );\r\n\r\nexport default PrivateRoute;\r\n// export default PrivateWrapper;"],"mappings":"AAAA,OAASA,OAAO,KAAQ,wBAAwB,CAChD,OAASC,WAAW,CAAEC,QAAQ,KAAQ,kBAAkB,CACxD,OAASC,cAAc,KAAQ,0BAA0B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE1D,QAAS,CAAAC,YAAYA,CAAAC,IAAA,CAAe,IAAZ,CAAAC,QAAQ,CAAAD,IAAA,CAARC,QAAQ,CAC9B,GAAI,CAAAC,IAAI,CAAGT,OAAO,CAAC,CAAC,CACpB,GAAI,CAAAU,QAAQ,CAAGT,WAAW,CAAC,CAAC,CAC5B;AACA;AACA;AAEA,GAAI,CAACQ,IAAI,CAACE,eAAe,CAAE,CACzB;AACA;AACA;AACA;AACA;AACA,mBAAON,IAAA,CAACH,QAAQ,EAACU,EAAE,CAAC,QAAQ,CAACC,KAAK,CAAE,CAAEC,IAAI,CAAEJ,QAAS,CAAE,CAACK,OAAO,MAAE,CAAC,CACpE,CAEF;AACA;AACE;AACE;AACF;AACA;AACA;AACA,MAAO,CAAAP,QAAQ,CACjB,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,cAAe,CAAAF,YAAY,CAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}