{"ast":null,"code":"var _jsxFileName = \"/Users/gyurmeydorj/Habituall/client/src/context/SharedContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { backendAPI } from '../clientDotEnv';\nimport { useAuth } from './AuthContext';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst host = backendAPI;\n// Create a context\nconst SharedContext = /*#__PURE__*/createContext();\n\n// Create a provider component\nconst SharedProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  let location = useLocation();\n  const [navLinks, setNavLinks] = useState([]);\n  const [fetchError, setFetchError] = useState(false);\n  let {\n    isAuthenticated\n  } = useAuth();\n  // const [hi, ]\n  useEffect(() => {\n    let habits = [];\n    fetch(host + '/api/habits', {\n      credentials: \"include\"\n    }).then(a => {\n      if (!a.ok) {\n        // setNavError(true); \n        setFetchError(true);\n        console.log(\"fetchError\");\n        // throw new Error('unable to fetch list of habits');\n        return {\n          error: \"habit list fetch error\"\n        };\n      }\n      return a.json();\n    }).then(jsonObj => {\n      console.log(jsonObj, \"useEffect fetch api habits called\");\n      if (jsonObj.error) return Promise.resolve();\n      // console.log(jsonObj, \"useEffect fetch api habits resolved\")\n      /**\n       * response looks like this:\n       * {\n       * message: \"docs fetched\",\n       * _id: \"\",\n       * habits: {habits: [{..}, {..}], userId: \"\" }\n       * }\n       */\n\n      habits = [...jsonObj.habits[0].habits];\n      setNavLinks(habits);\n      console.log(jsonObj.habits, \"sc\", navLinks);\n      //set \n    }).catch(e => {\n      throw new Error(e);\n    });\n  }, [isAuthenticated, location.pathname.split(\"/habits/\")[1]]);\n  useEffect(() => {\n    console.log(\"href changed only\");\n  }, [location.pathname.split(\"/habits/\")[1]]);\n  return (\n    /*#__PURE__*/\n    // <SharedContext.Provider value={{currHabitProvided: [currHabit, setCurrHabit]}}>\n    _jsxDEV(SharedContext.Provider, {\n      value: {\n        navLinks,\n        setNavLinks\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n// Create a custom hook to use the context\n_s(SharedProvider, \"P8Si42INya0a3NbljKzYK619FTc=\", false, function () {\n  return [useLocation, useAuth];\n});\n_c = SharedProvider;\nconst useSharedContext = () => {\n  _s2();\n  return useContext(SharedContext);\n};\n_s2(useSharedContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport { SharedProvider, useSharedContext };\nvar _c;\n$RefreshReg$(_c, \"SharedProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","backendAPI","useAuth","useLocation","jsxDEV","_jsxDEV","host","SharedContext","SharedProvider","_ref","_s","children","location","navLinks","setNavLinks","fetchError","setFetchError","isAuthenticated","habits","fetch","credentials","then","a","ok","console","log","error","json","jsonObj","Promise","resolve","catch","e","Error","pathname","split","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSharedContext","_s2","$RefreshReg$"],"sources":["/Users/gyurmeydorj/Habituall/client/src/context/SharedContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { backendAPI } from '../clientDotEnv';\nimport { useAuth } from './AuthContext';\nimport { useLocation } from 'react-router-dom';\n\n\nconst host = backendAPI;\n// Create a context\nconst SharedContext = createContext();\n\n// Create a provider component\nconst SharedProvider = ({ children }) => {\n    let location = useLocation();\n    const [navLinks, setNavLinks] = useState([]);\n    const [fetchError, setFetchError] = useState(false);\n    let {isAuthenticated} = useAuth();\n    // const [hi, ]\n    useEffect(() => {\n        let habits = [];\n\n        fetch(host+'/api/habits', {credentials: \"include\"})\n            .then(a => {\n                if(!a.ok){\n                    // setNavError(true); \n                    setFetchError(true);\n                    console.log(\"fetchError\");\n                    // throw new Error('unable to fetch list of habits');\n                    return {error: \"habit list fetch error\"}\n                }\n                return a.json();\n            })\n            .then(jsonObj => {\n                console.log(jsonObj, \"useEffect fetch api habits called\")\n                if(jsonObj.error) return Promise.resolve();\n                // console.log(jsonObj, \"useEffect fetch api habits resolved\")\n                /**\n                 * response looks like this:\n                 * {\n                 * message: \"docs fetched\",\n                 * _id: \"\",\n                 * habits: {habits: [{..}, {..}], userId: \"\" }\n                 * }\n                 */\n\n                habits = [...jsonObj.habits[0].habits]; \n                setNavLinks(habits);              \n                \n                console.log(jsonObj.habits, \"sc\", navLinks)\n                //set \n            })\n            .catch(e => {\n                throw new Error(e);\n            });\n    }, [isAuthenticated, location.pathname.split(\"/habits/\")[1]]);\nuseEffect(() =>{\nconsole.log(\"href changed only\")\n},[location.pathname.split(\"/habits/\")[1]])\n    return (\n        // <SharedContext.Provider value={{currHabitProvided: [currHabit, setCurrHabit]}}>\n        <SharedContext.Provider value={{navLinks, setNavLinks}}>\n            {children}\n        </SharedContext.Provider>\n    );\n};\n\n// Create a custom hook to use the context\nconst useSharedContext = () => {\n    return useContext(SharedContext);\n};\n\nexport {SharedProvider, useSharedContext}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}