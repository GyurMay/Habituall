{"ast":null,"code":"var _jsxFileName = \"/Users/gyurmeydorj/Habituall/client/src/components/PrivateRoute.js\",\n  _s = $RefreshSig$();\nimport { useAuth } from \"../context/AuthContext\";\nimport { useLocation, Navigate } from \"react-router-dom\";\nimport { SharedProvider } from \"../context/SharedContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PrivateRoute(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  let auth = useAuth();\n  let location = useLocation();\n  // const {currHabitProvided} = useSharedContext();\n  // const {currHabit, setCurrHabit} = currHabitProvided;\n  // const {currHabit, setCurrHabit} = useSharedContext();\n\n  if (!auth.isAuthenticated) {\n    // console.log(\"auth not authenticate in Private Route\", auth.isAuthenticated, (new Date()).getMilliseconds());\n    // Redirect them to the /login page, but save the current location they were\n    // trying to go to when they were redirected. This allows us to send them\n    // along to that page after they login, which is a nicer user experience\n    // than dropping them off on the home page.\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  }\n\n  //wrap this with Context sharing currHabit\n  // let comp = \n  // <SharedProvider>\n  // children\n  // </SharedProvider>\n  // ;\n  // console.log(\"wrapped in SharedProvider\")\n  return children;\n}\n\n// const PrivateRoute = ({ component: Component, ...rest }) => (\n//   <Route {...rest} render={(props) => (\n//     auth.isAuthenticated === true\n//       ? <Component {...props} />\n//       : \n//       // document.location = document.location.origin+'/login'\n//       <Navigate to='/login'\n//       // {{ \n//       //     // pathname: '/login',\n//       //     // state: { from: props.location }  \n//       //   }} \n//       />\n//   )} />\n// );\n_s(PrivateRoute, \"HRLOLLAXFjObMMH3UCaG4AIfmXk=\", false, function () {\n  return [useAuth, useLocation];\n});\n_c = PrivateRoute;\nexport default PrivateRoute;\n// export default PrivateWrapper;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["useAuth","useLocation","Navigate","SharedProvider","jsxDEV","_jsxDEV","PrivateRoute","_ref","_s","children","auth","location","isAuthenticated","to","state","from","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gyurmeydorj/Habituall/client/src/components/PrivateRoute.js"],"sourcesContent":["import { useAuth } from \"../context/AuthContext\";\r\nimport { useLocation, Navigate } from \"react-router-dom\";\r\nimport { SharedProvider } from \"../context/SharedContext\";\r\n\r\nfunction PrivateRoute({ children }) {\r\n  let auth = useAuth();\r\n  let location = useLocation();\r\n  // const {currHabitProvided} = useSharedContext();\r\n  // const {currHabit, setCurrHabit} = currHabitProvided;\r\n  // const {currHabit, setCurrHabit} = useSharedContext();\r\n\r\n  if (!auth.isAuthenticated) {\r\n    // console.log(\"auth not authenticate in Private Route\", auth.isAuthenticated, (new Date()).getMilliseconds());\r\n    // Redirect them to the /login page, but save the current location they were\r\n    // trying to go to when they were redirected. This allows us to send them\r\n    // along to that page after they login, which is a nicer user experience\r\n    // than dropping them off on the home page.\r\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n  }\r\n  \r\n//wrap this with Context sharing currHabit\r\n// let comp = \r\n  // <SharedProvider>\r\n    // children\r\n  // </SharedProvider>\r\n  // ;\r\n  // console.log(\"wrapped in SharedProvider\")\r\n  return children;\r\n}\r\n\r\n\r\n// const PrivateRoute = ({ component: Component, ...rest }) => (\r\n//   <Route {...rest} render={(props) => (\r\n//     auth.isAuthenticated === true\r\n//       ? <Component {...props} />\r\n//       : \r\n//       // document.location = document.location.origin+'/login'\r\n//       <Navigate to='/login'\r\n//       // {{ \r\n//       //     // pathname: '/login',\r\n//       //     // state: { from: props.location }  \r\n//       //   }} \r\n//       />\r\n//   )} />\r\n// );\r\n\r\nexport default PrivateRoute;\r\n// export default PrivateWrapper;"],"mappings":";;AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,WAAW,EAAEC,QAAQ,QAAQ,kBAAkB;AACxD,SAASC,cAAc,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,SAASC,YAAYA,CAAAC,IAAA,EAAe;EAAAC,EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAChC,IAAIG,IAAI,GAAGV,OAAO,CAAC,CAAC;EACpB,IAAIW,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC5B;EACA;EACA;;EAEA,IAAI,CAACS,IAAI,CAACE,eAAe,EAAE;IACzB;IACA;IACA;IACA;IACA;IACA,oBAAOP,OAAA,CAACH,QAAQ;MAACW,EAAE,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAEJ;MAAS,CAAE;MAACK,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpE;;EAEF;EACA;EACE;EACE;EACF;EACA;EACA;EACA,OAAOX,QAAQ;AACjB;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAD,EAAA,CAxCSF,YAAY;EAAA,QACRN,OAAO,EACHC,WAAW;AAAA;AAAAoB,EAAA,GAFnBf,YAAY;AA0CrB,eAAeA,YAAY;AAC3B;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}